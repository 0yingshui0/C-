#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>                  //使用strlen函数需引用该头文件
#include <Windows.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>



//
////冒泡排序
//
//void bubble_sort(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz - 1; i++)//确定冒泡排序的趟数
//	{
//		int j = 0;
//		int flag = 1;          //假设这一趟要排序的数据已经有序
//		for (j = 0; j < sz - 1 - i; j++)//sz-1-i在j的循环中相当于常数（不变），作用是令已排序的最后的数据不参与排序
//		{
//			if (arr[j] > arr[j + 1]);
//			{
//				int tmp = arr[j];   //
//				arr[j] = arr[j + 1];//两两交换
//				arr[j + 1] = tmp;   //
//				flag = 0;    //本趟要排序的数据其实不完全有序
//			}
//		}
//		if (flag == 1)
//		{
//			break;  //仅用于for及switch语句中
//		}
//	}
//}
//int main()
//{
//	int arr[] = { 9, 8, 7, 6, 5, 4 , 3, 2, 1 };
//	//对arr进行排序，排成升序
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	bubble_sort(arr,sz);//冒泡排序
//	int i = 1;
//	for (i = 0; i < sz; i++)
//	{
//		printf(" %d ", arr[i]);
//	}
//	return 0;
//}

//二维数组的存放

//int main()
//{
//	int arr[][4] = { {1,2,3,4},{5,6,7,8 } };
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 4; j++)
//		{
//			//printf("&arr[%d][%d] = %p\n", i, j, &arr[i][j]);//二维数组也是连续存放的
//			printf("&arr[%d][%d] = %p\n", i, j, &arr[i][j]);//打印&arr[i][j]
//		}
//	}
//	return 0;
//}



//二维数组

//int main()
//{
//	int arr1[3][4] = { {1,2,3} ,{4,5,6} };
//	//int ch[5][6];
//	int arr2[][4] = { {1,2,3,4},{5,6,7,8} };//二维数组  行可以省略  列不可以
//	return 0;
//}



//int main()
//{                        //数组在内存中是连续存放的
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("&arr[%d] = %p\n", i, &arr[i]);
//	}
//	return 0;
//}



//int main()
//{
//	int arr[10] = { 0 };//数组的不完全初始化
//	//计算数组的元素个数
//	int i = 0;//坐下标
//	for (i = 0; i < 10; i++)
//	{
//		arr[i] = i;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d\t", arr[i]);
//	}
//	return 0;
//}


//int main()
//{
//	char arr1[] = "abc";
//	char arr2[] = { 'a','b','c' };
//	printf("%d\n", sizeof(arr1));//4
//	printf("%d\n", sizeof(arr2));//3
//	printf("%d\n", strlen(arr1));//3
//	printf("%d\n", strlen(arr2));//随机，排到\0停止计数
//	return 0;
//}

// 1.strlen 和 sizeof 没有什么关联
// 2.strlen 是计算字符串长度的-只能针对字符串长度-库函数-使用的引头文件
// 3.sizeof计算变量、数组、类别的大小-单位是字节-操作符

//int main()
//{
//	char arr[] = "abcdf";
//	printf("%d\n", sizeof(arr));
//	//sizeof 计算arr所占空间的大小
//	//7个元素-char 7*1 = 7
//
//	printf("%d\n", strlen(arr));
//	// strlen求字符串——'\0'之前的字符个数
//	//[a b c d f]
//	//5
//
//	return 0;
//}
