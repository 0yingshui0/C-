#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>                  //使用strlen函数需引用该头文件
#include <Windows.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

//////汉诺塔问题
//
//#include <stdio.h>
//
//void move(char getone, char putone)
//{
//	printf("%c-->%c\n", getone, putone);
//}
//void hanoi(int n, char one, char two, char three) /*将n个盘从one借助two,移到three*/
//{
//	if (n == 1)
//		move(one, three);
//	else
//	{
//		hanoi(n - 1, one, three, two);          //
//		move(one, three);                       //核心代码
//		hanoi(n - 1, two, one, three);          //
//	}
//}
//int main()
//{
//	int m;
//	printf("输入盘子数量:");
//	scanf("%d", &m);
//	printf("移动 %3d 个盘子的步骤为:\n", m);
//	hanoi(m, 'A', 'B', 'C');
//	return 0;
//}

////  递归  与   循环    两者择优选用  
//
////递归  ——  栈溢出     //符合两个条件也会发生
//void test(int n)
//{
//	if (n < 10000)
//	{
//		test(n + 1);
//	}
//}
//int main()
//{
//	test(1);
//	return 0;
//}


//斐波那契数列  递归
//int count = 0;
//int Fib(int n)        //重复计算，浪费资源   可能导致栈溢出
//{
//	if (n == 3)    
//	{
//		count++;     //第三个斐波那契数的计算次数
//	}
//	if (n <= 2)
//	{
//		return 1;
//	}
//	else
//	{
//		return Fib(n - 1) + Fib(n - 2);
//	}
//}

////斐波那契数列  循环
//int Fib(int n)
//{
//	int a = 1;
//	int b = 1;
//	int c = 1;
//	while (n > 2)    //n代表循环次数
//	{
//		c = a + b;
//		a = b;
//		b = c;
//		n--;       //故每循环一次减一
//	}
//	return c;
//}
//
////输出第n个斐波那契数列
//int main()
//{
//	int n = 0;
//	int ret = 0;
//	scanf("%d", &n);
//	//  TDD   测试驱动开发
//	ret = Fib(n);
//	printf("第 %d 个斐波那契数是 %d\n", n, ret);
//	//printf("count=%d\n", count);
//	return 0;
//}


////求n的阶乘   递归
//
//int Fac(int n)
//{
//	if (n == 1)     //当乘到n=1时
//		return 1;
//	else
//		return n * Fac(n - 1);  //  通过递归来计算n*（n-1）*···*2
//}
//
//int main()
//{
//	int n = 0;
//	scanf("%d", &n);
//	int ret = Fac(n);
//	printf("n的阶乘是：>%d\n", ret);
//
//	return 0;
//}



//计算字符串长度
 
////创建临时变量
//int my_strlen(char* str)
//{
//	int count = 0;
//	while (* str != '\0')
//	{
//		count++;
//		str++;
//	}
//	return count;
//}

////不创建临时变量   递归  （大事化小）
//int my_strlen(char* str)
//{
//	if (*str != '\0')
//		return 1 + my_strlen(str + 1);
//	else
//		return 0;     //字符是\0的情况
//}
//int main()
//{
//	char arr[] = "yingshui" ;
//	//int len = strlen(arr);  //求字符串长度
//	//printf("len=%d\n", len);
//
//	//使用自己编写的函数
//	int len = my_strlen(arr);  //arr是数组，数组传参，传过去的不是整个数组，而是第一个元素的地址
//	printf("len=%d\n", len);
//	return 0;
//}


////输入1234，令其输出为1 2 3 4
//
//void print(int n)
//{
//	if (n > 9)
//	{
//		print(n / 10);
//	}
//	printf("%d ", n % 10);
//}
//
//int main()
//{
//	unsigned int num = 0;
//	scanf("%d", &num);
//	//递归
//	print(num);
//	return 0;
//}


////最简单的递归  会造成栈溢出
//int main()
//{
//	printf("hehe\n");
//	main();                    //栈溢出——递归常见错误
//		return 0;
//}

////函数声明          //函数要先声明后定义，
//#include "Add.h"  //声明放在头文件(.h文件)中，定义放在.cpp文件中，引用时用双引号（自己写的头文件）
//int main()
//{
//	int a = 44;
//	int b = 54;
//	//函数调用
//	int ret = Add(a, b);
//	printf("sum= %d\n", ret);
//	return 0;
//}



//链式访问
//把一个函数的返回值作为另外一个函数的参数

//int main()
//{
//	printf("%d", printf("%d", printf("%d", 43)));
//	//printf函数  其返回值是打印字符的个数
//	return 0;
//}


//int main()
//{
//	int len = 0;
//	//1
//	len = strlen("abc");
//	printf("len=%d\n", len);
//	//2  链式访问
//	printf("len=%d\n", strlen("abc"));
//	return 0;
//}



//函数的嵌套调用
//函数与函数之间可以有机的组合
//函数中可以调用另一个函数来实现功能


//每调用一次函数，num加一次

//void Add(int* p)
//{
//	(*p)++;   //++的优先级较高，故直接作用于p，所以要用()括住
//}
//
//int main()
//{
//	int num = 0;
//	Add(&num);
//	printf("num = %d\n", num);
//	Add(&num);
//	printf("num = %d\n", num);
//	Add(&num);
//	printf("num = %d\n", num);
//	return 0;
//}


////打印1000-2000年之间的闰年   使用函数
////
//int is_leapyear(int y)
//{
////	if (y % 4 == 0 && y % 100 != 0)  //使用 % 进行判断
////		return 1;
////	else if (y % 400 == 0)
////		return 1;
//	if ((y % 4 == 0 && y % 100 != 0) || (y % 400 == 0))  //另一种写法
//		return 1;
//	else
//		return 0;
//}
//int main()
//{
//	int year = 0;
//	for (year = 1000; year <= 2000; year += 4)
//	{
//		if (is_leapyear(year) == 1)    //  调用函数
//			printf(" %d ", year);
//	}
//	return 0;
//}


////打印100-200之间的素数   使用函数
//
//int is_prime(int n)    //创建一个判断是否为素数的函数
//{
//	int j = 0;
//	for (j = 2; j <= sqrt(n); j++)//只判断到平方根，减少计算次数
//	{
//		if (n%j == 0)
//		{
//			return 0;
//		}
//	}
//	return 1;   //  须放在循环外，防止重复输出 1  
//}
//int main()
//{
//	int i = 0;
//	for (i = 101; i <= 200; i+=2)
//	{
//		//判断i是否为素数
//		if(is_prime(i) == 1)
//			printf(" %d " ,i);
//	}
//	return 0;
//}



//  实际参数（实参）：真实传给函数的参数  ，实参可以是：常量、变量、表达式、函数等。无论实参是何种类型的参数，在进行函数调用时，它们都必须有确定的值，以便把这些值传给形参。

//  形式参数（形参）：指函数后括号中的变量，因为形式参数只有在函数被调用的过程中才实例化（分配内存单元），所以叫形式参数。形式参数当函数调用完后就自动销毁了，因此形式参数只在函数中有效。

//当实参传给形参时
//形参其实是实参的一份临时拷贝
//对形参的改变是不会改变实参的

//下例，x，y是形式参数     a，b是实际参数

////交换两个数字的值
////第二种尝试
//
//void Swap(int* pa, int* pb)//获取a，b的值
//{
//	int tmp = 0;
//	tmp = *pa;
//	*pa = *pb;              //交换a，b的值
//	*pb = tmp;              
//}
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	printf("a=%d,b=%d\n", a, b);
//	Swap(&a, &b);
//	printf("a=%d,b=%d\n", a, b);
//	return 0;
//}



////  第一种尝试    无效
//void Swap(int x, int y)    //  void  无返回值
//{
//	int ret = 0;
//	ret = x;
//	x = y;
//	y = ret;
//}                        //  x ,y 的地址与 a， b 的地址不同，故无法交换 
//int main()
//{
//	int a = 10;
//	int b = 20;
//	printf("a=%d , b=%d\n", a, b);
//	Swap(a, b);
//	printf("a=%d, b=%d\n", a, b);
//	return 0;
//}



////   创建一个函数，选择一个较大的数
////定义函数
//int get_max(int x, int y)
//{
//	if (x > y)
//		return x;
//	else
//		return y;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int max = get_max(a, b);  //调用函数
//	printf(" max = %d\n", max);
//		return 0;
//}


/*
  ret_type fun_name(para1,*)
  {
      stament;//语句项
   }
   ret_type    返回类型
   fun_name    函数名
   para1       函数参数
*/



////memset               学会阅读文档 
////memory  - 内存 set - 设置  
//int main()
//{
//	char arr[] = "hello world";
//	memset(arr, '*', 5);
//	printf("%s\n", arr);
//	//输出  ***** world
//	return 0;
//}



////strcpy - 使用方法

//int main()
//{
//	char arr1[] = "bit";
//	char arr2[20] = "###############";  //   因为复制了\0  所以中止打印
//	strcpy(arr2, arr1);               //  把arr1复制到arr2   包括\0
//	printf("%s\n", arr2);
//
//	//strcpy - string copy - 字符串拷贝
//	//strlen - string lenth - 计算字符串长度
//	return 0;
//}
