# C-study
C语言学习时留下的代码
//   数据的存储

////  输出什么？

//  整型与浮点型
int main()
{
	int n = 9;
	float *pFloat = (float *)&n;
	printf("n的值为：%d\n", n);
	printf("*pFloat的值为：%f\n", *pFloat);

	*pFloat = 9.0;
	printf("num的值为：%d\n", n);
	printf("*pFloat的值为：%f\n", *pFloat);
	return 0;
}


//int main()
//{
//	unsigned char i = 0;
//	for (i = 0; i <= 255; i++)
//	{
//		printf("hello world\n");  //  死循环	
//	}
//	return 0;
//}


//int main()
//{
//	char a[1000];
//	int i;
//	for (i = 0; i < 1000; i++)
//	{
//		a[i] = -1 - i;
//	}
//	printf("%d", strlen(a));//  255
//	return 0;
//}


//int main()
//{
//	unsigned int i;  //  打印9，8，7，6，5，4，3，2，1，死循环
//	                 //  因为 i 为无符号数 一直大于等于 0
//	for (i = 9; i >= 0; i++)
//	{
//		printf("%u\n", i);
//	}
//	return 0;
//}


//int main()
//{
//	char a = -128;
//	//  char 的 有符号数 存储域为[-128，127]之间  
//	//char a = 128;  //与 a = 128 的结果一致   128 = 127 + 1  即在内存中存储为 -128 的补码一样
//	// -128 的原码、反码、补码
//	//1000 0000 0000 0000 0000 0000 1000 0000
//	//1111 1111 1111 1111 1111 1111 0111 1111
//	//1111 1111 1111 1111 1111 1111 1000 0000 - 补码
//	//1000 0000
//	//1111 1111 1111 1111 1111 1111 1000 0000 - 补码 打印 4294967168
//
//	printf("%u\n", a);
//
//   //%d-打印十进制的有符号数字 
//   //%u-打印十进制的无符号数字 
//
//	return 0;
//}

////  输出什么？
//int main()
//{
//	char a = -1;
//	//  存储 8 个比特位，即截取后八位 
//	//           为 11111111
//	//  整形提升：
//	//  有符号数：符号位为 1 ，中间补 1 至 32 位，
//	//                  即11111111111111111111111111111111  打印为：-1
//	signed char b = -1;
//	//  与 char a  相同 即11111111111111111111111111111111  打印为：-1
//	unsigned char c = -1;
//	//       存储为11111111
//	//  整形提升：
//	//  无符号数：符号位为 1 ，中间补 1 至 32 位，
//	//                  即00000000000000000000000011111111  打印为：255
//	printf("a = %d b = %d c = %d\n", a, b, c);
//	return 0;
//}


//  大端小端
//大端（存储）模式，是指数据的低位保存在内存的高地址中，而数据的高位，保存在内存的低地址中;
//小端（存储）模式，是指数据的低位保存在内存的低地址中，而数据的高位，保存在内存的高地址中。

//  指针类型决定了  一次加  1  跳过的字节数

//int check_sys()
//{
//	int a = 1;
//	return *(char*)&a;
//}
//
//int main()
//{
//	//  一个告诉我们当前机器的字节序是什么
//	//  返回1，小端
//	//  返回0，大端
//	int ret = check_sys();
//	if (ret == 1)
//	{
//		printf("小端\n");
//	}
//	else
//	{
//		printf("大端\n");
//	}
//	return 0;
//}

//  整数存储
//int main()
//{
//	int a = 10;
//	int b = -10;
//	//  正数的原码、反码、补码相同
//	//  负数的  原码  由原数转换为二进制得到  
//	//          反码  符号位不变  其它位  取反
//	//          补码  反码+1就得到补码
//	//  
//	//   补码的意义： 在计算机系统中,数值一律用补码来表示和存储。
//	//                原因在于,使用补码,可以将符号位和数值域统一处理;
//	//                同时, 加法和減法也可以统一处理(CPU只有加法器)
//	//                此外, 补码与原码相互转换, 其运算过程是相同的, 
//	//                不需要额外的硬件电路。
//
//	return 0;
//}
