#define _CRT_SECURE_NO_WARNINGS 1      //为了使用规范的C语言规则
#include <stdio.h>
#include <string.h>                  //使用strlen函数需引用该头文件
#include <Windows.h>
#include <stdlib.h>

////   打印1000到2000年之间的闰年
//
////小知识
////能被4整除并且不能被100整除是闰年
////能被400整除是闰年
//int main()
//{
//	int year = 1000;
//	int count = 0;
//	for (year = 1000;year<=2000;year++)
//	{
//		//if (year % 4 == 0 && year % 100 != 0)
//		//{
//		//	printf(" %d ", year);
//		//	count++;                      // 统计有多少闰年
//
//		//}
//		//else if (year % 400 == 0)
//		//{
//		//	printf(" %d ", year);
//		//	count++;
//		//}

//       简略语句

//		if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
//		{
//			printf(" %d ", year);
//			count++;
//		}
//	}
//	printf("\n\n%d\n", count);
//	return 0;
//}


////  给定两个数，求这两个数的最大公约数

//优化
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int r = 0;
//	scanf("%d%d", &a, &b);
//	while (a%b)              //非0为真，0为假
//	{
//		r = a % b;
//		a = b;
//		b = r;
//	}
//	printf("最大公约数：%d", b);
//
//	return 0;
//}

//
//int main()
//{
//	int a, b;
//	int ret = 0;
//	scanf("%d%d", &a, &b);
//	if (a < b)
//	{
//	    ret = a;
//		a = b;
//		b = ret;
//	}
//	while (ret != 0)
//	{
//	    ret = a % b;
//		a = b;
//		b = ret;			
//	}
//	printf("最大公约数是：%d", a);
//
//	return 0;
//}



////  打印1~100中所有3的倍数的数字
//
//int main()
//{
//	int a = 0;
//	int i = 0;
//	for (i = 1; i <= 100; i++)
//	{
//		int ret = i % 3;
//		if ( ret == 0)
//			printf("%d ",i);
//	}
//	return 0;
//}


////写三个数，从大到小输出
//
//int main()
//{
//
//	int a, b, c;
//	scanf("%d%d%d", &a, &b, &c);
//	//算法实现
//	//a，b，c，
//	//由大到小输出
//
//	if (a < b)
//	{
//		int ret = a;
//		a = b;
//		b = ret;
//	}
//	if (a < c)
//	{
//		int ret = a;
//		a = c;
//		c = ret;
//	}
//	if (b < c)
//	{
//		int ret = b;
//		b = c;
//		c = ret;
//	}
//	printf("%d %d %d \n", a, b, c);
//
//	return 0;
//
//}

////   输入密码，三次机会
//
//int main()
//{
//	int i = 0;
//	char password[20] = { 0 };
//	printf("请输入密码:>");
//	for (i = 0; i < 3; i++)
//	{
//		scanf("%s", password);
//		if (strcmp(password, "123456") == 0)
//		{
//			printf("登录成功\n");
//			break;
//		}
//		else
//		{
//			printf("密码错误\n请输入密码：>");
//		}
//	}
//	if (i==3)
//	{
//		printf("三次密码错误，退出系统\n");
//	}
//	
//	return 0;
//}


//  两边向中间移动，显示字符

//int main()
//{
//	char arr1[] = "welcome to world!!!!";
//    char arr2[] = "####################";
//	int left = 0;
//	//int right = (sizeof(arr1) / sizeof(arr1[0])) - 2;    //-2是因为\0也算一个字符，故减2以表示最后一个字符的下标     表述过于繁琐
//	int right = strlen(arr1) - 1;
//
//	while (left <= right)
//	{
//		arr2[left] = arr1[left];
//		arr2[right] = arr1[right];
//		printf("%s\n", arr2);
//		//休息一秒
//		Sleep(1000);           //休息   需引用<Windows.h>   单位是：毫秒（0.001秒）
//		system("cls");          //system  执行系统命令的函数   cls —— 清空屏幕   需引用<stdlib.h>
//		left++;
//		right--;
//	}
//	printf("%s", arr2);
//
//	return 0;
//}


////在数组中查找特定数值
//
////查找 7
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 7;
//	int sz = sizeof(arr) / sizeof(arr[0]);  //确定数组中字符个数
//	int left = 0 ;
//	int right = sz - 1;
//
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;
//		if (arr[mid] < k)
//		{
//			left = mid + 1;
//		}
//		else if (arr[mid] > k)
//		{
//			right = mid - 1;
//		}
//		else
//		{
//			if (arr[mid] == k)
//				printf("\n找到了,下标是%d\n", mid);
//			break;
//		}
//	}
//	if (left > right)
//		printf("\n找不到\n");
//		return 0;
//}

////计算1!+2!+3!+···+10!
//
////优化
//int main()
//{
//	int n = 0;
//	int i = 0;
//	int ret = 1;
//	int sum = 0;
//	for (i = 1; i <= 3; i++)
//	{
//		ret = ret * i;
//		sum = sum + ret;
//	}
//	printf(" sum = %d\n", sum);
//
//	return 0;
//}

//int main()
//{
//	int n = 0;
//	int i = 0;
//	int ret = 1;
//	int sum = 0;
//	for (i = 1; i <= 10; i++)
//	{
//		ret = 1;
//		for (n = 1; n <= i; n++)
//		{
//			ret = ret * n;	              //n的阶乘		
//		}
//		sum = sum + ret;		
//	}
//	printf("sum=%d\n", sum);
//
//	return 0;
//}

//计算n的阶乘

//int main()
//{
//	int n;
//	scanf("%d", &n);
//	int i = 0;
//	int a = 1;                  //将a定义在代码块前可以避免重复赋值
//	for (i = 1; i <= n; i++)
//	{		 
//		a = a * i;
//		if (i==n)
//			printf("%d", a);
//	}
//	
//	return 0;
//}


////  do while  循环语句
//
//int main()
//{
//	int i = 0;
//	do
//	{
//		if (i == 5)
//			continue;             //陷入死循环
//		printf("%d ", i);
//		i++;
//	} while (i <= 10);
//	return 0;
//}


//int main()
//{
//	int i = 0;
//	do
//	{
//		printf("%d  ", i);
//		i++;
//	}while (i <= 10);
//	
//	return 0;
//}

//  for  循环语句

int main()
{
	int i = 0;
	//  初始化   判断   调整
	for (i = 1; i <= 10; i++)
	{
		if (i == 5)
			continue;
			//break;

		printf("\t%d\t", i);
		
	}

	return 0;
}


////  getchar  与  putchar   and  while
//int main()
//{
//	int ch = 0;
//	while ((ch = getchar()) != EOF)      //ctrl + z  跳出循环
//	{
//		if (ch<'0' || ch>'9')
//			continue;
//		putchar(ch);
//	}
//
//	return 0;
//}


//int main()
//{
//	int ch = 0;
//	int password[20] = { 0 };
//	printf("请输入密码：>");                //%s——数组
//	scanf("%s", &password);                //输入密码，存储在password数组中
//	//缓冲区中还剩一个'\n'
//	//读取一下'\n'
//	while ((ch = getchar()) != '\n')           //  不等于'\n'
//	{
//		;                                       //空语句
//	}
//	printf("请确认（Y or N）：>");
//	int ret = getchar();
//	if (ret='Y')
//	{
//		printf("确认成功");
//	}
//	else
//	{
//		printf("确认失败");
//	}
//
//	return 0;
//}


//int main() 
//{
//	int ch = 0;    //应只输入一个字符
//	while ((ch = getchar()) != EOF)           //EOF —— end of file 文件结束标志
//	{
//		putchar(ch);
//	}
//
//
//	//putchar(ch);
//	//printf("%c\n", ch);
//	
//	return 0;
//}


//int main()
//{
//	int i = 1;
//	while (i <= 10)
//	{
//		if (i == 5)
//			continue;    //     中止本次循环continue后的代码，直接跳转到while语句的判断部分。进行下一次循环的入口判断
//	//		break;
//		printf("%d ", i);
//		i++;
//	}
//	return 0;
//}

////  getchar  与  putchr
//int main() 
//{
//	int ch = 0;    //应只输入一个字符
//	while ((ch = getchar()) != EOF)
//	{
//		putchar(ch);
//	}
//
//
//	//putchar(ch);
//	//printf("%c\n", ch);
//	
//	return 0;
//}



//int main()
//{
//	int i = 1;
//	while (i <= 10)
//	{
//		if (i == 5)
//			continue;    //     中止本次循环continue后的代码，直接跳转到while语句的判断部分。进行下一次循环的入口判断
//	//		break;       //     直接跳出所有循环
//		printf("%d ", i);
//		i++;
//	}
//	return 0;
//}


//   switch  语句

int main()
{
	int n = 1;
	int m = 2;
	switch (n)
	{
	case 1:
		m++;
	case 2:
		n++;
	case 3:
		switch (n)
		{                  //switch   允许嵌套使用
		case 1:
			n++;
		case 2:
			m++;
			n++;
			break;
		}
	case 4:
		m++;
		break;
	default:
		break;
	}
	printf(" m = %d, n = %d\n", m, n);    //  m   = 5   ,   n  =   3
	return 0;
}


//int main()
//{
//	int day = 0;
//	scanf("%d", &day);
//	switch (day)
//	{
//	case 1:
//	case 2:
//	case 3:
//	case 4:
//	case 5:
//		printf("工作日\n");
//		break;
//	case 6:
//	case 7:
//		printf("休息日\n");
//		break;
//	default:
//		printf("输入错误，请输入1-7之间的值\n");
//		break;
//	}
//	return 0;
//}


////  1-100的奇数
//int main()
//{
//	int i = 1;
//	while (i <= 100)
//	{
//			printf(" %d ", i);
//			i+=2;
//
//	}
//	return 0;
//}


//int main()
//{
//	int i = 0;
//	while (i < 100)
//	{
//		static  int a = 0;
//		a += 1;
//		int b = a % 2;
//		if (1 == b)
//			printf(" %d ", a);
//		i++;
//	}
//
//	return 0;
//}


//if 语句

int main()
{
	int age = 100;
	if (age < 18)                   //如果条件成立，要执行多条语句，应该使用代码块
	{
		printf("未成年\n");
		printf("不能谈恋爱\n");
	}
	else
	{
		if (age >= 18 && age < 28)    //  && —— 逻辑与
			printf("青年\n");
		else if (age >= 28 && age < 50)
			printf("壮年\n");
		else if (age >= 50 && age < 90)
			printf("老年\n");
		else
			printf("老不死\n");
	}
	//int age = 10;
	//if (age < 18)
	//	printf("未成年\n");
	//else
	//	printf("成年\n");

	return 0;
}
