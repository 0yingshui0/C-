# C-study
C语言学习时留下的代码
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

//  C语言调试技巧

//  my_strlen 
int my_strlen(char* str)
{
	int count = 0;
	assert(str != NULL);//  保证指针的有效性
	while (*str != '\0')
	{
		count++;
		str++;
	}
	return count;
}

int main()
{
	char arr[] = "qwrettrytryyt";
	//char arr[256] = "";
	//scanf("%s", arr);   //  使用scanf 需指定数组最大容纳量
	int len = 0;
	len = my_strlen(arr);
	printf("strlen = %d\n", len);
	return 0;
}


//  my_strcpy 

//  优化前
//void my_strcpy(char* dest, char* src)
//{
//	while (*src != '\0')
//	{
//		*dest = *src;
//		src++;
//		dest++;
//	}
//	*dest = *src;// '\0'
//}

//  一次优化后   后置++，判断语句，判断条件
//void my_strcpy(char* dest, char* src)
//{
//	if (dest != NULL && src != NULL)  //  让代码更健壮，但无错误提示
//	{
//		while (*dest++ = *src++)//  '\0'的ASC码值为0，即为假，但'\0'已复制
//		{                       //   后置++，先使用，后++
//			;                    
//		}
//	}
//}

//  const 作用
//int main()
//{
//	const int a = 10;
//	int n = 20;
//	const int*p = &a;
//	//*p = 20;  
//                //  const 放在指针变量的*左边时，修饰的是*p，也就是说：不能通过p来改变*p(num)的值
//	            ////  const 放在指针变量的*右边时，修饰的是指针变量p本身，p不能被改变了
//	int * const p2 = &n;
//	const int * const p3 = &a;  //  无法改变a与p3的值
//	return 0;
//}

////  二次优化后     增加断言，常变量
//#include <assert.h>
//char* my_strcpy(char* dest,const char* src)
//{
//	char* ret = dest;
//	assert(dest != NULL);//  断言
//	assert(src != NULL); //  断言
//	//  把src指向的字符串拷贝到dest指向的空间，包含'\0'字符
//	while (*dest++ = *src++)
//	{
//		;
//	}
//	return ret;
//}
//
//int main()
//{
//	//strcpy
//	//字符串拷贝
//	char arr1[] = "########################";
//	char arr2[] = "hello world";
//	//my_strcpy(arr1, arr2);
//	//my_strcpy(arr1, NULL);//  测试断言
//	printf("%s\n", my_strcpy(arr1, arr2));
//	return 0;
//}


//int main()
//{
//	int i = 0;
//	int sum = 0;//保存最终结果 
//	int n = 0;
//	int ret = 1;//保存n的阶乘 
//	scanf("%d", &n);//3  1!+2!+3!=1+2+6=9 
//	for (i = 1; i <= n; i++)
//	{
//		int j = 0;
//		ret = 1;
//		for (j = 1; j <= i; j++)
//		{
//			ret *= j;
//		}
//		sum += ret;
//	}
//	printf("%d\n", sum);
//	return 0;
//}


//  CSDN  VS  调试技巧
//  调试环境配置
//  F5 - 启动调试 - 和F9配合使用
//  F10 - 逐过程
//  F11 - 逐语句
//  F9  -  切换断点  //  执行逻辑上的断点
//int main()
//{
//	int i = 0;
//	for (i = 0; i < 100; i++)
//	{
//		printf("%d ", i);
//	}
//	for (i = 0; i < 100; i++)
//	{
//		printf("%d ", 10 - i);
//	}
//	return 0;
//}


////  debug  和  release  区别
//
////  debug  模式下死循环   release  模式下  无bug
//int main()
//{
//	int i = 0;
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	for (i = 0; i <= 12; i++)
//	{
//		printf("hehe\n");
//		arr[i] = 0;
//	}
//	return 0;
//}
