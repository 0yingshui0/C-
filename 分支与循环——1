#define _CRT_SECURE_NO_WARNINGS 1      //为了使用规范的C语言规则
#include <stdio.h>
#include <string.h>                  //使用strlen函数需引用该头文件
#include <Windows.h>
#include <stdlib.h>

////打印100-200之间的素数   使用函数
//
//int is_prime(int n)    //创建一个判断是否为素数的函数
//{
//	int j = 0;
//	for (j = 2; j <= sqrt(n); j++)//只判断到平方根，减少计算次数
//	{
//		if (n%j == 0)
//		{
//			return 0;
//		}
//	}
//	return 1;   //  须放在循环外，防止重复输出 1  
//}
//int main()
//{
//	int i = 0;
//	for (i = 101; i <= 200; i+=2)
//	{
//		//判断i是否为素数
//		if(is_prime(i) == 1)
//			printf(" %d " ,i);
//	}
//	return 0;
//}



//  实际参数（实参）：真实传给函数的参数  ，实参可以是：常量、变量、表达式、函数等。无论实参是何种类型的参数，在进行函数调用时，它们都必须有确定的值，以便把这些值传给形参。

//  形式参数（形参）：指函数后括号中的变量，因为形式参数只有在函数被调用的过程中才实例化（分配内存单元），所以叫形式参数。形式参数当函数调用完后就自动销毁了，因此形式参数只在函数中有效。

//当实参传给形参时
//形参其实是实参的一份临时拷贝
//对形参的改变是不会改变实参的

//下例，x，y是形式参数     a，b是实际参数

////交换两个数字的值
////第二种尝试
//
//void Swap(int* pa, int* pb)//获取a，b的值
//{
//	int tmp = 0;
//	tmp = *pa;
//	*pa = *pb;              //交换a，b的值
//	*pb = tmp;              
//}
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	printf("a=%d,b=%d\n", a, b);
//	Swap(&a, &b);
//	printf("a=%d,b=%d\n", a, b);
//	return 0;
//}



////  第一种尝试    无效
//void Swap(int x, int y)    //  void  无返回值
//{
//	int ret = 0;
//	ret = x;
//	x = y;
//	y = ret;
//}                        //  x ,y 的地址与 a， b 的地址不同，故无法交换 
//int main()
//{
//	int a = 10;
//	int b = 20;
//	printf("a=%d , b=%d\n", a, b);
//	Swap(a, b);
//	printf("a=%d, b=%d\n", a, b);
//	return 0;
//}



////   创建一个函数，选择一个较大的数
////定义函数
//int get_max(int x, int y)
//{
//	if (x > y)
//		return x;
//	else
//		return y;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int max = get_max(a, b);  //调用函数
//	printf(" max = %d\n", max);
//		return 0;
//}


/*
  ret_type fun_name(para1,*)
  {
      stament;//语句项
   }
   ret_type    返回类型
   fun_name    函数名
   para1       函数参数
*/



////memset               学会阅读文档 
////memory  - 内存 set - 设置  
//int main()
//{
//	char arr[] = "hello world";
//	memset(arr, '*', 5);
//	printf("%s\n", arr);
//	//输出  ***** world
//	return 0;
//}



////strcpy - 使用方法

//int main()
//{
//	char arr1[] = "bit";
//	char arr2[20] = "###############";  //   因为复制了\0  所以中止打印
//	strcpy(arr2, arr1);               //  把arr1复制到arr2   包括\0
//	printf("%s\n", arr2);
//
//	//strcpy - string copy - 字符串拷贝
//	//strlen - string lenth - 计算字符串长度
//	return 0;
//}


//goto 用法
/*
for (...)              goto正确用法，用来跳出多重循环
{
	for (...)
	{
		for (...)
		{
			goto again;           
		}
	}
}
again:
{
	...
}
*/


////猜数字
////1.电脑会生成一个随机数
////2.猜数字
//
//void menu()       //定义一个菜单
//{
//	printf("******************************\n");
//	printf("****    1.play    2.exit  ****\n");
//	printf("******************************\n");
//}
//
//void game()      //定义游戏
//{
//	//1.生成一个随机数
//	int ret = 0;
//	int guess = 0;
//	//时间戳    当前计算机的时间  -（减去）  计算机起始时间（1970年1月1日0时0分0秒）=（xxxx）秒
//	//拿时间戳来设置随机数的生成起点
//	//time_t time(time_t *time)
//	//time_t
//	
//	ret = rand()%100+1;  //生成1到100之间的随机数
//	//printf("%d\n", ret);
//	//2.猜数字
//	while (1)
//	{
//		printf("请猜数字:>");
//		scanf("%d", &guess);
//		if (ret < guess)
//		{
//			printf("猜大了\n");
//		}
//		else if (ret > guess)
//		{
//			printf("猜小了\n");
//		}
//		else
//		{
//			printf("恭喜你，猜对了\n");
//			break;	
//		}
//	}
//}
//
//int main()
//{
//	int input = 0;
//	srand((unsigned int)time(NULL));
//	do
//	{
//		menu();//   一个简易菜单
//		printf("请选择>:");
//		scanf("%d", &input);
//		switch(input)
//		{
//		case 1:
//			game();//猜数字游戏
//			break;
//		case 0:
//			printf("退出游戏\n");
//			break;
//		default:
//			printf("选择错误\n");
//			break;
//		}
//	} while (input);
//	return 0;
//}



////  二分查找
////  查找一个整型数组中具体的某个数字，找到了输出其下标，找不到则输出找不到
//int main()
//{
//	int a = 0;
//	int i = 0;
//	scanf("%d", &a);
//	int arr[100] = { 0 };
//	int left = 0;
//	int sz = sizeof arr / sizeof arr[0];
//	int right = sz - 1;
//	int mid = 0;
//	for (i = 0; i <= 100; i++)
//	{
//		arr[i] = i + 1;
//	}
//	while (left<=right)        //二分法判断条件
//	{
//		mid = (left + right) / 2;//中间值获取
//		if (arr[mid] < a )
//		{
//			left = mid + 1;
//		}
//		if (arr[mid] > a)
//		{
//			right = mid - 1;
//		}
//		else if (arr[mid]==a)//记得使用==判断！！！
//		{
//			printf("\n找到了，下标是:> %d\n", mid);
//			break;
//		}
//	}
//	if (left > right)
//	{
//		printf("\n找不到\n");
//	}
//	return 0;
//}

////输出九九乘法表
//
//int main()
//{
//	int i = 0;
//	int j = 0;
//	int product = 0;
//	for (i = 1; i <= 9; i++)
//	{
//		for (j = 1; j <= i; j++)
//		{
//			product = i * j ;
//			printf(" %d*%d=%-2d", i, j, product);//左对齐
//			//printf(" %d*%d=%2d", i, j, product);//右对齐
//		}	
//		printf("\n");
//	}
//	return 0;
//}


////选出10个整数中的最大值
//
//int main()
//{
//	int arr[] = { -1,-2,-3,-4,-55,-6,-7,-8,-9,-10 };
//	int i = 0;
//	int max = arr[0];
//	//int max = 0;//如果是负数则无法判断
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	for (i = 0; i < sz; i++)
//	{
//		if (arr[i] > max)
//		{
//			max = arr[i];
//		}
//	}
//	printf("max=%d\n", max);
//}


////   计算1/1-1/2+1/3-1/4+1/5······+1/99-1/100的值，并打印出来
//
////老师写的
//int main()
//{
//	int i = 0;
//	double sum = 0.0;
//	int flag = 1;
//	for (i = 1; i <= 100; i++)
//	{
//		sum += flag * 1.0 / i;
//		flag = -flag;
//	}
//	printf("%lf\n", sum);
//	return 0;
//}


//我写的
//int main()
//{
//	int i = 0;
//	int j = 0;
//	double ret = 0.0;
//	double sum = 0.0;
//	int arr1[50] = { 0 };   //用来装正奇数
//	int arr2[50] = { 0 };   //用来装负偶数
//	double arr3[50] = { 0 };   //用来装结果
//	for (i = 1; i < 100; i += 2)
//	{
//		arr1[j] = i;
//		j++;
//	}
//	for (i = 2,j = 0; i <= 100; i += 2)
//	{
//		arr2[j] = 0-i;
//		j++;
//	}
//	for (i = 0; i < 50; i++)
//	{
//		ret = 1.0 / arr1[i] + 1.0 / arr2[i];
//		arr3[i] = ret;     //相邻两个数相加赋给数组arr3
//	}
//	for (i = 0; i < 50; i++)
//	{
//		sum = sum + arr3[i];
//	}
//	printf("%lf\n", sum);
//	return 0;
//}



//  数一下1到100的所有整数中出现多少个数字9

//int main()
//{
//	int i = 0;
//	int count = 0;
//	for (i = 1; i < 100; i++)
//	{
//		if (i % 10 == 9)    //判断个位数是否为9
//		{
//			count++;
//		}
//		if (i / 10 == 9)    //判断十位数是否为9
//		{
//			count++;
//		}
//	}
//	printf("%d", count);
//	return 0;
//}


//   打印100到200之间的素数

// // i=a*b    a和b中至少有一个数字<=根号i

// 筛法             没写出来

//int main()
//{
//	int a = 0;
//	int i = 0;
//	int j = 0;
//	int count = 0;
//	int arr1[100] = { 0 };
//	int arr2[50] = { 0 };                  //用来装素数
//	for (i = 1; i < 100; i++)     //选取1-100之间的数，去除偶数
//	{
//		arr1[i - 1] = i;           //用arr1装1-100之间的数
//	}
//	for (i = 0; i < 100; i++)     //   
//	{
//		while (j<3)
//		if (arr1[i] % j == 0)
//		{
//			
//		}
//	}
//
//
//	return 0;
//}



////试除法

////  试除法    第五境界
//int main()
//{
//	int i = 9;
//	int j = 0;
//	int arr[100];
//	int count = 0;
//	for (i = 0; i < 100; ++i)   //将1-100赋給arr
//	{
//		arr[i] = i + 1;
//	}
//	for (i = 0; i < 100; ++i)
//	{
//		j = i - 1;//空过0、1、2
//		while (j > 1)
//		{
//			if (arr[i] % j == 0)
//				arr[i] = 0;
//			j = j - 1;
//		}
//	}
//	for (j = 1; j < 100; ++j)
//	{
//		if (arr[j] != 0)
//		{
//			printf("%d ", arr[j]);
//			count++;
//		}
//	}
//	printf("\n共有%d个素数\n", count);
//	return 0;
//}


//
//int main()       //第一、二、三境界
//{
//	int i = 0;
//	int count = 0;
////                   sqrt  -  开平方的数学库函数        引用<math.h>
//     
//	for(i=101;i<200;i+=2)    //  从奇数中寻找偶数，效率提升一倍
//	//for (i = 100; i <= 200; i++)
//	{
//		//判读i是否为素数
//		//素数判断的规则
//		//1.试除法
//		//产生2->i-1的数字
//		int j = 0;
//		for (j=2;j<sqrt(i);j++)
//		//for (j = 2; j < i; j++)
//		{
//			if(i%j==0)
//			break;
//		}
//		if (j > sqrt(i))
//		{
//			count++;
//			printf("%d ", i);
//		}
//	}
//	printf("\n count= %d \n", count);
//
//	return 0;
//}


////   打印1000到2000年之间的闰年
//
////小知识
////能被4整除并且不能被100整除是闰年
////能被400整除是闰年
//int main()
//{
//	int year = 1000;
//	int count = 0;
//	for (year = 1000;year<=2000;year++)
//	{
//		//if (year % 4 == 0 && year % 100 != 0)
//		//{
//		//	printf(" %d ", year);
//		//	count++;                      // 统计有多少闰年
//
//		//}
//		//else if (year % 400 == 0)
//		//{
//		//	printf(" %d ", year);
//		//	count++;
//		//}

//       简略语句

//		if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
//		{
//			printf(" %d ", year);
//			count++;
//		}
//	}
//	printf("\n\n%d\n", count);
//	return 0;
//}


////  给定两个数，求这两个数的最大公约数

//优化
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int r = 0;
//	scanf("%d%d", &a, &b);
//	while (a%b)              //非0为真，0为假
//	{
//		r = a % b;
//		a = b;
//		b = r;
//	}
//	printf("最大公约数：%d", b);
//
//	return 0;
//}

//
//int main()
//{
//	int a, b;
//	int ret = 0;
//	scanf("%d%d", &a, &b);
//	if (a < b)
//	{
//	    ret = a;
//		a = b;
//		b = ret;
//	}
//	while (ret != 0)
//	{
//	    ret = a % b;
//		a = b;
//		b = ret;			
//	}
//	printf("最大公约数是：%d", a);
//
//	return 0;
//}



////  打印1~100中所有3的倍数的数字
//
//int main()
//{
//	int a = 0;
//	int i = 0;
//	for (i = 1; i <= 100; i++)
//	{
//		int ret = i % 3;
//		if ( ret == 0)
//			printf("%d ",i);
//	}
//	return 0;
//}


////写三个数，从大到小输出
//
//int main()
//{
//
//	int a, b, c;
//	scanf("%d%d%d", &a, &b, &c);
//	//算法实现
//	//a，b，c，
//	//由大到小输出
//
//	if (a < b)
//	{
//		int ret = a;
//		a = b;
//		b = ret;
//	}
//	if (a < c)
//	{
//		int ret = a;
//		a = c;
//		c = ret;
//	}
//	if (b < c)
//	{
//		int ret = b;
//		b = c;
//		c = ret;
//	}
//	printf("%d %d %d \n", a, b, c);
//
//	return 0;
//
//}

////   输入密码，三次机会
//
//int main()
//{
//	int i = 0;
//	char password[20] = { 0 };
//	printf("请输入密码:>");
//	for (i = 0; i < 3; i++)
//	{
//		scanf("%s", password);
//		if (strcmp(password, "123456") == 0)
//		{
//			printf("登录成功\n");
//			break;
//		}
//		else
//		{
//			printf("密码错误\n请输入密码：>");
//		}
//	}
//	if (i==3)
//	{
//		printf("三次密码错误，退出系统\n");
//	}
//	
//	return 0;
//}


//  两边向中间移动，显示字符

//int main()
//{
//	char arr1[] = "welcome to world!!!!";
//    char arr2[] = "####################";
//	int left = 0;
//	//int right = (sizeof(arr1) / sizeof(arr1[0])) - 2;    //-2是因为\0也算一个字符，故减2以表示最后一个字符的下标     表述过于繁琐
//	int right = strlen(arr1) - 1;
//
//	while (left <= right)
//	{
//		arr2[left] = arr1[left];
//		arr2[right] = arr1[right];
//		printf("%s\n", arr2);
//		//休息一秒
//		Sleep(1000);           //休息   需引用<Windows.h>   单位是：毫秒（0.001秒）
//		system("cls");          //system  执行系统命令的函数   cls —— 清空屏幕   需引用<stdlib.h>
//		left++;
//		right--;
//	}
//	printf("%s", arr2);
//
//	return 0;
//}


////在数组中查找特定数值
//
////查找 7
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 7;
//	int sz = sizeof(arr) / sizeof(arr[0]);  //确定数组中字符个数
//	int left = 0 ;
//	int right = sz - 1;
//
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;
//		if (arr[mid] < k)
//		{
//			left = mid + 1;
//		}
//		else if (arr[mid] > k)
//		{
//			right = mid - 1;
//		}
//		else
//		{
//			if (arr[mid] == k)
//				printf("\n找到了,下标是%d\n", mid);
//			break;
//		}
//	}
//	if (left > right)
//		printf("\n找不到\n");
//		return 0;
//}

////计算1!+2!+3!+···+10!
//
////优化
//int main()
//{
//	int n = 0;
//	int i = 0;
//	int ret = 1;
//	int sum = 0;
//	for (i = 1; i <= 3; i++)
//	{
//		ret = ret * i;
//		sum = sum + ret;
//	}
//	printf(" sum = %d\n", sum);
//
//	return 0;
//}

//int main()
//{
//	int n = 0;
//	int i = 0;
//	int ret = 1;
//	int sum = 0;
//	for (i = 1; i <= 10; i++)
//	{
//		ret = 1;
//		for (n = 1; n <= i; n++)
//		{
//			ret = ret * n;	              //n的阶乘		
//		}
//		sum = sum + ret;		
//	}
//	printf("sum=%d\n", sum);
//
//	return 0;
//}

//计算n的阶乘

//int main()
//{
//	int n;
//	scanf("%d", &n);
//	int i = 0;
//	int a = 1;                  //将a定义在代码块前可以避免重复赋值
//	for (i = 1; i <= n; i++)
//	{		 
//		a = a * i;
//		if (i==n)
//			printf("%d", a);
//	}
//	
//	return 0;
//}


////  do while  循环语句
//
//int main()
//{
//	int i = 0;
//	do
//	{
//		if (i == 5)
//			continue;             //陷入死循环
//		printf("%d ", i);
//		i++;
//	} while (i <= 10);
//	return 0;
//}


//int main()
//{
//	int i = 0;
//	do
//	{
//		printf("%d  ", i);
//		i++;
//	}while (i <= 10);
//	
//	return 0;
//}

//  for  循环语句

int main()
{
	int i = 0;
	//  初始化   判断   调整
	for (i = 1; i <= 10; i++)
	{
		if (i == 5)
			continue;
			//break;

		printf("\t%d\t", i);
		
	}

	return 0;
}


////  getchar  与  putchar   and  while
//int main()
//{
//	int ch = 0;
//	while ((ch = getchar()) != EOF)      //ctrl + z  跳出循环
//	{
//		if (ch<'0' || ch>'9')
//			continue;
//		putchar(ch);
//	}
//
//	return 0;
//}


//int main()
//{
//	int ch = 0;
//	int password[20] = { 0 };
//	printf("请输入密码：>");                //%s——数组
//	scanf("%s", &password);                //输入密码，存储在password数组中
//	//缓冲区中还剩一个'\n'
//	//读取一下'\n'
//	while ((ch = getchar()) != '\n')           //  不等于'\n'
//	{
//		;                                       //空语句
//	}
//	printf("请确认（Y or N）：>");
//	int ret = getchar();
//	if (ret='Y')
//	{
//		printf("确认成功");
//	}
//	else
//	{
//		printf("确认失败");
//	}
//
//	return 0;
//}


//int main() 
//{
//	int ch = 0;    //应只输入一个字符
//	while ((ch = getchar()) != EOF)           //EOF —— end of file 文件结束标志
//	{
//		putchar(ch);
//	}
//
//
//	//putchar(ch);
//	//printf("%c\n", ch);
//	
//	return 0;
//}


//int main()
//{
//	int i = 1;
//	while (i <= 10)
//	{
//		if (i == 5)
//			continue;    //     中止本次循环continue后的代码，直接跳转到while语句的判断部分。进行下一次循环的入口判断
//	//		break;
//		printf("%d ", i);
//		i++;
//	}
//	return 0;
//}

////  getchar  与  putchr
//int main() 
//{
//	int ch = 0;    //应只输入一个字符
//	while ((ch = getchar()) != EOF)
//	{
//		putchar(ch);
//	}
//
//
//	//putchar(ch);
//	//printf("%c\n", ch);
//	
//	return 0;
//}



//int main()
//{
//	int i = 1;
//	while (i <= 10)
//	{
//		if (i == 5)
//			continue;    //     中止本次循环continue后的代码，直接跳转到while语句的判断部分。进行下一次循环的入口判断
//	//		break;       //     直接跳出所有循环
//		printf("%d ", i);
//		i++;
//	}
//	return 0;
//}


//   switch  语句

int main()
{
	int n = 1;
	int m = 2;
	switch (n)
	{
	case 1:
		m++;
	case 2:
		n++;
	case 3:
		switch (n)
		{                  //switch   允许嵌套使用
		case 1:
			n++;
		case 2:
			m++;
			n++;
			break;
		}
	case 4:
		m++;
		break;
	default:
		break;
	}
	printf(" m = %d, n = %d\n", m, n);    //  m   = 5   ,   n  =   3
	return 0;
}


//int main()
//{
//	int day = 0;
//	scanf("%d", &day);
//	switch (day)
//	{
//	case 1:
//	case 2:
//	case 3:
//	case 4:
//	case 5:
//		printf("工作日\n");
//		break;
//	case 6:
//	case 7:
//		printf("休息日\n");
//		break;
//	default:
//		printf("输入错误，请输入1-7之间的值\n");
//		break;
//	}
//	return 0;
//}


////  1-100的奇数
//int main()
//{
//	int i = 1;
//	while (i <= 100)
//	{
//			printf(" %d ", i);
//			i+=2;
//
//	}
//	return 0;
//}


//int main()
//{
//	int i = 0;
//	while (i < 100)
//	{
//		static  int a = 0;
//		a += 1;
//		int b = a % 2;
//		if (1 == b)
//			printf(" %d ", a);
//		i++;
//	}
//
//	return 0;
//}


//if 语句

int main()
{
	int age = 100;
	if (age < 18)                   //如果条件成立，要执行多条语句，应该使用代码块
	{
		printf("未成年\n");
		printf("不能谈恋爱\n");
	}
	else
	{
		if (age >= 18 && age < 28)    //  && —— 逻辑与
			printf("青年\n");
		else if (age >= 28 && age < 50)
			printf("壮年\n");
		else if (age >= 50 && age < 90)
			printf("老年\n");
		else
			printf("老不死\n");
	}
	//int age = 10;
	//if (age < 18)
	//	printf("未成年\n");
	//else
	//	printf("成年\n");

	return 0;
}
