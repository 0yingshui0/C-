#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
//   指针面试

//   第一题============================================================

// 数组名的意义 

//1. sizeof（数组名）, 这里的数组名表示整个数组, 计算的是整个数组的大小
//2. &数组名, 这里的数组名表示整个数组, 取出的是整个数组的地址
//3. 除此之外所有的数组名都表示首元素的地址


//int main()
//{
	//数组名是首元素的地址 
	//1. sizeof(数组名)  -  数组名表示整个数组 
	//2. &数组名  -  数组名表示整个数组 

	//  一维数组 
	//int a[] = { 1,2,3,4 };            // 4*4=16 
	//printf("%d\n", sizeof(a));        // 16  sizeof(数组名)-计算的是数组总大小-单位是字节-16 
	//printf("%d\n", sizeof(a + 0));    // 4/8 - 数组名这里表示首元素的值, a + θ还是首元素地址, 地址的大小就是4 / 8个字节
	//printf("%d\n", sizeof(*a));       // 4   - 数组名表示首元素地址, *a就是首元素, sizeof(*a)就是4个字节
	//printf("%d\n", sizeof(a + 1));    // 4/8 - 数组名这里表示首元素的值,a+1是第2个元素的地址,地址的大小就是4/8个字节 
	//printf("%d\n", sizeof(a[1]));     // 4   - 第2个元素的大小 
	//printf("%d\n", sizeof(&a));       // 4/8 &a取出的是数组的地址, 但是数组的地址那也是地址, 地址的大小就是4 / 8个字节
	//printf("%d\n", sizeof(*&a));      // 16  - &a数组的地址,数组的地址解引用访问的数组, sizeof计算的就是数组的大小, 单位是字节 
	//printf("%d\n", sizeof(&a + 1));   // 4/8 &a 是数组的地址,&a+1虽然地址跳过整个数组, 但还是地址, 所以是4/8个字节 
	//printf("%d\n", sizeof(&a[0]));    // 4/8 &a[0] 是第一个元素的地址 
	//printf("%d\n", sizeof(&a[0] + 1));// 4/8 &a[0]+1 是第二个元素的地址 
	

	//字符数组 
	//char arr[] = { 'a','b','c','d','e','f' };
	//printf("%d\n", sizeof(arr));       // 6 sizeof计算的是数组大小,6*1=6字节 
	//printf("%d\n", sizeof(arr + 0));   // 4/8 arr是首元素的地址,arr+0还是首元素的地址，地址的大小是4/8字节 
	//printf("%d\n", sizeof(*arr));      // 1   arr是首元素的地址, *arr就是首元素, 首元素是字符大小是一个字节
	//printf("%d\n", sizeof(arr[1]));    // 1 
	//printf("%d\n", sizeof(&arr));      // 4/8  &arr 虽然是数组的地址,但还是地址,地址大小是4/8个字节 
	//printf("%d\n", sizeof(&arr + 1));  // 4/8  &arr + 1  是跳过整个数组后的地址, 地址大小是4 / 8个字节
	//printf("%d\n", sizeof(&arr[0] + 1)); // 4/8  第二个元素的地址


	//const char arr[] = { 'a','b','c','d','e','f' };
	//printf("%d\n", strlen(arr));       // 随机值
	//printf("%d\n", strlen(arr + 0));   // 随机值
	////printf("%d\n", strlen(*arr));    //err
	////printf("%d\n", strlen(arr[1]));  //err 
	//printf("%d\n", strlen(&arr));      // 随机值
	//printf("%d\n", strlen(&arr + 1));  // 随机值 - 6
	//printf("%d\n", strlen(&arr[0] + 1));//随机值 - 1

	//const char *p = "abcdef";
	//printf("%d\n", sizeof(p));         // 4/8 - 计算指针变量
	//printf("%d\n", sizeof(p + 1));     // 4/8 - p+1 得到的是字符b的地址
	//printf("%d\n", sizeof(*p));        // 1    *p就是字符串的第一个字符 - 'a'
	//printf("%d\n", sizeof(p[0]));      // 1 int arr[10]; arr[0] == *(arr+0)  p[0] == *(p+0) == 'a'
	//printf("%d\n", sizeof(&p));        // 4/8  地址
	//printf("%d\n", sizeof(&p + 1));    // 4/8  地址
	//printf("%d\n", sizeof(&p[0] + 1)); // 4/8  地址

	//const char* p = "abcdef";
	//printf("%d\n", strlen(p));       // 6 
	//printf("%d\n", strlen(p + 1));   // 5
	////printf("%d\n", strlen(*p));    // err
	////printf("%d\n", strlen(p[0]));  // err
	//printf("%d\n", strlen(&p));      // 随机值
	//printf("%d\n", strlen(&p + 1));  // 随机值
	//printf("%d\n", strlen(&p[0] + 1));//随机值

	//二维数组 
//	int a[3][4] = { 0 };
//	printf("%d\n", sizeof(a));                // 12 *（4/8） 数组元素个数*整型字节数
//	printf("%d\n", sizeof(a[0][0]));		  // 4/8 首元素 整型字节数
//    printf("%d\n", sizeof(a[0]));			  // 4 * （4/8） a[0]相当于第一行作为一维数组的数组名，
//	                                          // sizeof(arr[0])把数组名单独放在sizeof()内，计算的是第一行的大小
//	
//	printf("%d\n", sizeof(a[0]+ 1));		  // 4/8 首元素地址 + 1   a[0]是第一行的数组名，数组名此时是首元素的地址，表达式即：第一行第二个元素的地址
//	
//	printf("%d\n", sizeof(*(a[0] + 1)));	  // 4/8 第二个元素      解引用  第一行第二个元素地址
//	printf("%d\n", sizeof(a + 1));			  // 4/8 第二行的地址     a是二维数组的数组名，没有sizeof(a)，也没有&(a)，所以a是首元素的地址
//	                                          // 而把二维数组看成一维数组时，二维数组的首元素是它的第一行，a就是第一行（首元素）的地址
//	
//	printf("%d\n", sizeof(*(a + 1)));		  // 4 * (4/8) 计算第二行的大小，单位是字节
//	printf("%d\n", sizeof(&a[0] + 1));		  // 4/8 第二行的地址
//	printf("%d\n", sizeof(*(&a[0] + 1)));	  // 4 * (4/8) 计算第二行的大小
//	printf("%d\n", sizeof(*a));				  // 4 *（4/8）计算第一行的大小
//	printf("%d\n", sizeof(a[3]));			  // 4 * (4/8) 计算第四行的大小，sizeof并不会真的去访问第四行，只是根据数据类型进行计算
//
//	return 0;
//}

//==================================================================
//第二题
//int main()
//{
//	int a[5] = { 1,2,3,4,5 };
//	int *ptr = (int*)(&a + 1); //&数组名, 这里的数组名表示整个数组, 取出的是整个数组的地址
//	printf("%d,%d\n", *(a + 1), *(ptr - 1));
//	return 0;
//}

//==================================================================
//第三题
//struct Test
//{
//	int Num;
//	char *pcName;
//	short sDate;
//	char cha[2];
//	short sBa[4];
//}* p;
//
//// 假设p的值为0x100000 如下表表达式的值分别为多少 ?
////已知,结构体Test类型的变量大小是20个字节 
//
//int main()
//{
//	p = (struct Test*)0x100000;
//	printf("%p\n", p + 0x1);                // 00100014
//	printf("%p\n", (unsigned long)p + 0x1); // 00100001    整型数字 + 1
//	printf("%p\n", (unsigned int*)p + 0x1); // 00100004    int*类型 + 1
//	return 0;
//}

//====================================================================
//第四题
//int main()
//{
//	int a[4] = { 1,2,3,4 };
//	int *ptr1 = (int*)(&a + 1);
//	int *ptr2 = (int*)((int)a + 1);//  从
//	printf("%x,%x", ptr1[-1], *ptr2);//4，2000000
//	return 0;
//}

//======================================================================
//第五题
//int main()
//{
//	int a[3][2] = { (0,1),(2,3),(4,5) };// 逗号表达式，只使用最后表达式的值
//	int *p;
//	p = a[0];
//	printf("%d", p[0]); 
//	return 0;
//}

//========================================================================
//第六题
//int main()
//{
//	const char *c[] = { "ENTER", "NEW","POINT","FIRST" };
//	const char**cp[] = { c + 3,c + 2,c + 1,c };
//	const char***cpp = cp;
//	printf("%s\n", **++cpp);          // POINT 
//	printf("%s\n", *--*++cpp + 3);    //  ER
//	printf("%s\n", *cpp[-2] + 3);     //  ST
//	printf("%s\n", cpp[-1][-1] + 1);  //  EW
//	return 0;
//}
