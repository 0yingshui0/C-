#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>       /* strcmp strlen */
#include <stdlib.h>       /* qsort */


//  指针的进阶


//==============================================================================================================
//   qsort 的用法       quick  sort  快速排序
//
//   qsort example 
//void qsort(
//	void *base,
//	size_t num,
//	size_t width,
//	int(__cdecl *compare)(const void *, const void *)
//);
//第一个参数:待排序数组的首元素地址 
//第二个参数:待排序数组的元素个数 
//第三个参数:待排序数组的每个元素的大小-单位是字节 
//第四个参数:是函数指针,比较两个元素的所用函数的地址-这个函数使用者自己实现 
//函数指针的两个参数是:待比较的两个元素的地址


//typedef struct stu
//{
//	char name[20];
//	int age;
//}stu;
//
//int compare(const void * a, const void * b)
//{
//	//比较两个整型值的
//	return (*(int*)a - *(int*)b);
//}
//int compare_f(const void * a, const void * b)
//{
//	/*if (*(float*)a == *(float*)b)
//		return 0;
//	else if (*(float*)a > *(float*)b)
//		return 1;
//	else
//		return -1;*/
//
//		//强制类型转换
//	return ((int)(*(float*)a - *(float*)b));
//}
//
//int compare_stu_age(const void* e1, const void* e2)
//{
//	return ((stu*)e1)->age - ((stu*)e2)->age;
//}
//
//int compare_stu_name(const void* e1, const void* e2)
//{
//	//  比较名字就是比较字符串
//	//  比较字符串不能用 ><=  ,  应该使用strcmp函数
//	return strcmp(((stu*)e1)->name, ((stu*)e2)->name);
//}
//
//void test1()
//{
//	int values[] = { 40, 10, 100, 90, 20, 25 };
//	int sz = sizeof(values) / sizeof(values[0]);
//	int n;
//	qsort(values, sz, sizeof(int), compare);
//	for (n = 0; n < sz; n++)
//		printf("%d ", values[n]);
//}
//
//void test2()
//{
//	float f[] = { 9.0,8.3,2.0,5.0,4.0 };
//	int sz = sizeof(f) / sizeof(f[0]);
//	int n;
//	qsort(f, sz, sizeof(float), compare_f);
//	for (n = 0; n < sz; n++)
//		printf("%f ", f[n]);
//}
//
//void test3()
//{
//	stu s1[] = { {"jack",18},{"john",19},{"tom",8} };
//	int sz = sizeof(s1) / sizeof(s1[0]);
//	int n;
//	qsort(s1, sz, sizeof(s1[0]), compare_stu_name);
//	for (n = 0; n < sz; n++)
//		printf("%s %d \n", s1[n].name, s1[n].age);
//}
//
////  ==============自定义排序==============
//void Swap(char* buf1, char* buf2, int width)   //  交换地址
//{
//	int i = 0;
//	for (i = 0; i < width; i++)  //   交换对应宽度的次数
//	{
//		char tmp = *buf1;   //   交换一字节的地址，故需解引用
//		*buf1 = *buf2;      
//		*buf2 = tmp;
//		buf1++;
//		buf2++;
//	}
//}
//void bubble_sort(void*base, int sz, int width, int(*cmp)(const void*e1,const void*e2))  //  冒泡排序
//{
//	int i = 0;
//	//  趟数
//	for (i = 0; i < sz - 1; i++)
//	{
//	//  每一趟比较的趟数
//		int j = 0;
//		for (j = 0; j < sz - 1 - i; j++)
//		{
//			//  两个元素的比较
//			if (cmp((char*)base + j * width, (char*)base + (j + 1)*width) > 0)
//			{
//				//  交换
//				Swap((char*)base + j * width, (char*)base + (j + 1)*width, width);
//			}
//		}
//	}
//}
//
//void test4()
//{
//	int values[] = { 40, 10, 100, 90, 20, 25 };
//	int sz = sizeof(values) / sizeof(values[0]);
//	int n;
//	bubble_sort(values, sz, sizeof(stu), compare);
//	for (n = 0; n < sz; n++)
//		printf("%d ", values[n]);
//}
//
//void test5()
//{
//	stu s1[] = { {"jack",18},{"john",19},{"tom",8} };
//	int sz = sizeof(s1) / sizeof(s1[0]);
//	int n;
//	bubble_sort(s1, sz, sizeof(stu), compare_stu_age);
//	for (n = 0; n < sz; n++)
//		printf("%s %d \n", s1[n].name, s1[n].age);
//}

//int main()
//{
//
//	//test1();
//	//test2();
//	test5();
//	return 0;
//}



//=========================================================================================================
//
//  函数指针数组的应用
//
//   函数指针数组  ----  转移表  与  回调函数
//
//  回调函数就是一个通过函数指针调用的函数。如果你把函数的指针(地址)作为参数传递给另一
//  个函数, 当这个指针被用来调用其所指向的函数时, 我们就说这是回调函数。回调函数不是由该
//  函数的实现方直接调用, 而是在特定的事件或条件发生时由另外的一方调用的, 用于对该事件或
//  条件进行响应。
//
//
//void menu()
//{
//	printf("################################\n");
//	printf("################################\n");
//	printf("####### 1.Add    2.Sub  ########\n");
//	printf("####### 3.Mul    4.Div  ########\n");
//	printf("#######     0.exit      ########\n");
//	printf("################################\n");
//	printf("################################\n");
//}
//
//int Add(int x, int y)
//{
//	return x + y;
//}
//int Sub(int x, int y)
//{
//	return x - y;
//}
//int Mul(int x, int y)
//{
//	return x * y;
//}
//int Div(int x, int y)
//{
//	return x / y;
//}
//
////  回调函数
//void Calc(int (*pf)(int, int))
//{
//	int x = 0;
//	int y = 0;
//	printf("请输入两个操作数：>");
//	scanf("%d%d", &x, &y);
//	printf("\n%d\n\n", (*pf)(x, y));
//}
//
//
//int main()
//{
//	//  回调函数  版本
//	
//	int input = 0;
//	do {
//		menu();
//		printf("请选择:>");
//		scanf("%d", &input);
//		switch(input)
//		{
//		case 1:
//			Calc(Add);
//			break;
//		case 2:
//			Calc(Sub);
//			break;
//		case 3:
//			Calc(Mul);
//			break;
//		case 4:
//			Calc(Div);
//			break;
//		case 0:
//			printf("退出\n");
//			break;
//		default:
//			printf("选择错误\n");
//			break;
//		}
//	} while (input);
//	return 0;
//}
//
////转移表   版本
//int main()
//{
//	int input = 0;
//	int x = 0;
//	int y = 0;
//	int(*pfArr[])(int x, int y) = { 0,Add,Sub,Mul,Div };   //  转移表
//	do
//	{
//		menu();
//		printf("请输入：>");
//		scanf("%d", &input);
//		if (input > 0 && input < 4)
//		{
//			printf("请输入两个操作数：>");
//			scanf("%d%d", &x, &y);
//			printf("\n%d\n\n", (*pfArr[input])(x, y));
//		}
//		else if (input == 0)
//		{
//			printf("退出\n");
//		}
//		else
//		{
//			printf("选择错误\n");
//		}
//	} while (input);  //  判断条件  为  input  实现  0  退出  ， 非0  循环
//	return 0;
//}
//
//======================================================================================================================
//
////  函数指针  与  函数指针数组
//
//char* my_strcpy(char* dest, const char* src);
////1.写一个函数指针 pf, 能够指向my_strcpy
////2.写一个函数指针数组 pfArr , 能够存放4个 my_strcpy函数的地址
//char* my_strcpy(char* dest, const char* src)
//{
//	int i = 0;
//	while (*(src+i) != '\0')      
//	{
//		*(dest + i) = *(src + i);
//		i++;
//	}
//	*(dest + i) = '\0';
//	return dest;
//}
//int main()
//{
//	const char* src = "hello world";
//	char dest[] = "#################";
//	char* (*pf)(char* dest, const char* src) = my_strcpy;//   函数指针
//	(*pf)(dest, src);
//	printf("%s\n", dest);
//	char* (*pfArr[4])(char* dest, const char* src) = { my_strcpy,my_strcpy,my_strcpy,my_strcpy };//   函数指针数组
//	int i = 4;
//	for (i = 0; i < 4; i++)
//	{
//		printf("%s\n", (*pfArr[i])(dest, src));
//	}
//	return 0;
//}
//
//
//
//  函数指针
//
////  代码1
//// (*(void(*)())0)();    //    把0强制类型转换成：void(*)() 函数指针类型 - 0就是一个函数的地址
//                         //    调用0地址处的该函数
////  代码2
////signa1是一个函数声明
////signal函数的参数有2个, 第一个是int。第二个是函数指针, 该函数指针指向的函数的参数是int, 返回类型是void
////signa1函数的返回类型也是一个函数指针 : 该函数指针指向的函数的参数是int, 返回类型是void
//
//  void(  *signal(  int, void(*)(int)  )   )(int);  //  这是一个名为 signal 的函数 ，输入参数为(int，void(*)(int))
//                                                   //  返回类型为void(*)(int) - 函数指针
////  代码2可 重写为下列两行代码
//  typedef void(*pfun_t)(int);   //  重命名 函数指针 ，* 要与 函数名 放在一起
//  pfun_t signal(int, pfun_t);   //  
//
//
//下面pfun1和pfun2哪个有能力存放test函数的地址? 
//void(*pfun1)();  //  *  先与 pfun1  结合  ，pfun1 为 指针  ，可以存放函数的地址
//void *pfun2();   //  void 先与 * 结合，pfun2  为函数名，代表  返回类型 为  void* 的函数
//首先, 能给存储地址, 就要求pfun1或pfun2是指针, 那哪个是指针 ? 答案是 pfun1
//
// 函数指针数组
//
//  函数指针
//  数组指针 - 是指向数组的指针
//  函数指针 - 是指向函数的指针 - 存放函数的一个指针
//
//void Print(const char* str)
//{
//	printf("%s\n", str);
//}
//int main()
//{
//	void(*p)(const char*) = Print;
//	(*p)("hello world");
//	return 0;
//}
//
// 函数指针数组
//
//int Add(int x, int y)
//{
//	return x + y;
//}
//int Sub(int x, int y)
//{
//	return x - y;
//}
//int Mul(int x, int y)
//{
//	return x * y;
//}
//int Div(int x, int y)
//{
//	return x / y;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int arr[10] = { 0 };
//	int(*p)[10] = &arr;
//	//printf("%d\n", Add(a, b));
//	//  &函数名 和 函数名 都是函数的地址
//	//printf("%p\n", &Add);
//	//printf("%p\n", Add);
//	int (*pa)(int, int) = Add;//  函数指针
//	int (*pb)(int, int) = Sub;//  函数指针
//	int(*parr[4])(int, int) = { Add,Sub,Mul,Div };//  函数指针数组
//	int i = 0;
//	for (i = 0; i < 4; i++)
//	{
//		printf("%d\n", parr[i](2, 3));//  5 , -1 , 6 , 0
//	}
//	//printf("%d\n", (*pa)(2, 3));
//	return 0;
//}
//===========================================================================================================================
////  二级指针
//
//void test(int** p)
//{}
//
//int main()
//{
//	int* ptr;
//	int** pp = &ptr;
//	test(&ptr);
//	test(pp);
//	int* arr[10];//
//	test(arr);   //  指针数组也可以
//	return 0;
//}
//
//
////  一级指针传参
//void print(int* p, int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d\n",*(p+i)); 
//	}
//}
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9 };
//	int *p = arr;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//一级指针p,传给函数 
//	print(p, sz);
//	return 0;
//}
//
// 
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "abcdef";
//	char* p1 = (char*)"abcdef";
//	char* p2 = (char*)"abcdef";
//	if (arr1 == arr2)
//	{
//		printf("hehe\n");
//	}
//	else
//	{
//		printf("haha\n");
//	}
//	return 0;
//}
//
//void Print(const char*str)
//{
//	printf("%s\n", str);
//}
//int main()
//{
//	void(*p)(const char*) = Print;  //  函数指针的应用
//	(*p)("hello world");
//	return 0;
//}
//
//
//
////    二维数组传参
//
//void test(int arr[3][5])
//{}
//void test1(int arr[][5])
//{}
////void test2(int arr[3][])//  error
////{}
//void test3(int *arr)//      error
//{}
//void test4(int **arr)//     error
//{}
//void test5(int (*arr)[5])//   OK    //   *arr是指针，指向数组，数组有5个整型元素，元素类型是int
//{}
//int main()
//{
//	int arr[3][5] = { 0 };
//	test(arr);//二维数组传参
//	test1(arr);
//	//test2(arr);
//	//test3(arr);
//	//test4(arr);
//	test5(arr);
//	return 0;
//}
//
//
//
//    一维数组传参
//void test(int arr[])//ok?       //   ok
//{}
//void test(int arr[10])//ok?     //   ok
//{}
//void test(int *arr)//ok?        //   ok
//{}
//void test2(int *arr[20])//ok?   //   ok
//{}
//void test2(int **arr)//ok?      //   ok
//{}
//int main()
//{
//	int arr[10] = {0};
//	int *arr2[20] = {0};
//	test(arr);
//	test2(arr2);
//}
//
//
//
//  字符指针
//int main()
//{
//	char ch = 'w';
//	char* p = &ch;
//	const char* p2 = "abcdef";
//	return 0;
//}
//
//
//
////  数组指针 与 指针数组 的 区别
//int main()
//{
//	int arr[5];       // arr是一个5个元素的整形数组
//	
//	int *parr1[10];    // parr1是一个数组, 数组有10个元素, 每个元素的类型是int* , parr1是指针数组
//	
//	int (*parr2)[10];   //parr2是一个指针,该指针指向了一个数组,数组有10个元素,每个元素的类型是int
//						//parr2是数组指针
//	
//	int(*parr3[10])[5];  //parr3是一个数组,该数组有10个元素,每个元素是一个数组指针 
//	                     //该数组指针指向的数组有5个元素, 每个元素是int
//}
//
//
//
//   数组指针  - 指针 - 指向数组的指针
//
////  数组指针的用法
//void print1(int arr[][5], int x, int y)
//{
//	int i = 0; int j = 0;
//	for (i = 0; i < x; i++)
//	{
//		for (j = 0; j < y; j++)
//		{
//			printf("%d ", arr[i][j]);
//		}
//		printf("\n");
//	}
//}
//
//void print2(int(*p)[5], int x, int y)
//{
//	int i = 0; int j = 0;
//	for (i = 0; i < x; i++)
//	{
//		for (j = 0; j < y; j++)
//		{
//			//printf("%d ", p[i][j]);
//			//printf("%d ", *(p[i] + j));
//			//printf("%d ", *(*(p + i) + j));
//			printf("%d ", ((*(p + i))[j]));//  需先解应用（p+i）
//		}
//		printf("\n");
//	}
//}
//
//int main()
//{
//	int arr[3][5] = { {1,2,3,4,5},{2,3,4,5,6},{3,4,5,6,7} };
//	//print1(arr, 3, 5);//  arr - 数组名 -  数组名就是首元素地址
//	print2(arr, 3, 5);
//	return 0;
//}
//
////   数组指针的用法
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0; 
//	int*p = arr;
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", p[i]);     //  这四种写法完全等价
//		printf("%d ", *(p + i));
//		printf("%d ", *(arr + i));
//		printf("%d ", arr[i]);
//		//     arr[i] ==  *(arr + i)  ==  *(p + i)  ==  p[i]
//	}
//	return 0;
//}
//
//
//  麻烦用法
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int(*pa)[10] = &arr;
//	int i = 0;
//	for (i == 0; i < 10; i++)
//	{
//		printf("%d ", *(*pa + 1));// *pa == arr
//	}
//
//
//	/*for (i = 0; i < 10; i++)
//	{
//		printf("%d ", (*pa)[i]);
//	}*/
//	return 0;
//}
//
//
//int main()
//{
//	//char arr[5] = "0";
//	char* arr[5];  //  指针数组
//	char* (*pa)[5] = &arr;  //  二级指针  //  详见C-study图片
//
//	int arr2[10] = { 0 };
//	int(*p2)[10] = &arr2;
//	return 0;
//}
//
//
//int main()
//{
//	int*p = NULL;
//	char*pc = NULL;   //  p是整形指针 - 指向整形的指针 - 可以存放整形的地址
//	                  //  pc是字符指针-指向字符的指针-可以存放字符的地址 
//		              //  数组指针-指向数组的指针-存放数组的地址 
//
//	int arr[10] = { 0 };
//	//arr - 首元素地址
//	//&arr[0] - 首元素地址
//	//&arr - 数组的地址
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,18 };
//	int(*p)[10] = &arr;//数组的地址要存起来 
//	//上面的p就是数组指针
//	return 0;
//}
//
//
////  指针数组   是数组，用来存放指针的
//int main()
//{
//
//	int arr1[] = { 1,2,3,4,5 };
//	int arr2[] = { 2,3,4,5,6 };
//	int arr3[] = { 3,4,5,6,7 };
//	int* parr[] = { arr1, arr2, arr3 };//  指针数组
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 5; j++)
//		{
//			printf("%d ", *(parr[i] + j));//  指针
//		}
//		printf("\n");
//	}
//
//	//int a = 10;
//	//int b = 20;
//	//int c = 30;
//	//int d = 40;
//	//int* arr[4] = { &a,&b,&c,&d };
//	//int i = 0;
//	//for (i = 0; i < 4; i++)
//	//{
//	//	printf("%d ", *(arr[i]));
//	//}
//
//	//int arr[10] = { 0 };//  整形数组
//	//char ch[5] = { 0 };//  字符数组
//	//int* parr[4];  //存放整形指针的数组 - 指针数组
//	//char* pch[5];  //存放字符指针的数组 - 指针数组
//
//	return 0;
//}
//
//
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "acbdef";
//	char* p1 = (char*)"abcdef";  //  常量字符串  只存储一份  故p1与p2指向的地址一样
//	char *p2 = (char*)"abcdef";
//
//	if (p1 == p2)  //  打印  hehe    //  指向地址相同  故相等
//	{
//		printf("hehe\n");
//	}
//	{
//		printf("haha\n");
//	}
//
////	if (arr1 == arr2)   //  打印  haha  //  原因：是因为数组名代表首字符地址，所以不同
////	{
////		printf("hehe\n");
////	}
////	else
////	{
////		printf("haha\n");
////	}
//	return 0;
//}
//

//int main()
//{
//	int a = 10;
//	int* pa=&a; //
//	//char* pc &a: 
//	
//	char ch = 'w';
//	void*p = &a;
//	//p = &ch;
//	//*p = 0;
//	//p++;
//	//void* 类型的指针 可以接收任意类型的地址 
//	//void* 类型的指针 不能进行解引用操作
//	//void* 类型的指针 不能进行+-整数的操作
//	return 0;
//}
