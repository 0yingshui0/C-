# C-study
C语言学习时留下的代码
////  指针
//
////  指针数组 - 数组 - 存放指针的数组
////  数组指针 - 指针
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = 30;
//	int* pa = &a;
//	int* pb = &b;
//	int* pc = &c;
//	//整形数组 - 存放整形
//	//字符数组 - 存放字符
//	//指针数组 - 存放指针
//	//int arr[10]
//	int* arr2[3] = { &a,&b,&c };//指针数组
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		printf("%d ", *(arr2[i]));
//	}
//
//	return 0;
//}

////二级指针
//
//int main()
//{
//	int a = 10;
//	int* pa = &a;
//	int** ppa = &pa;//  ppa就是二级指针
//	//int*** pppa = &ppa;
//	printf("%d\n", **ppa);
//	printf("%d\n", a);
//	return 0;
//}


//// 指针和数组
//
//int main()
//{
//	int arr[10] = { 0 };
//	int* p = arr;
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*(p + i) = i;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", *(p + i));
//	}
//	/*for (i = 0; i < 10; i++)
//	{
//		printf("%p ================ %p\n", p + i, &arr[i]);
//	}*/
//	return 0;
//}

//int main()
//{
//	int arr[10] = { 0 };
//	printf("%p\n", arr); //  地址 - 首元素的地址
//	printf("%p\n\n", arr + 1);
//
//	printf("%p\n", &arr[0]);
//	printf("%p\n\n", &arr[0] + 1);
//
//	printf("%p\n", &arr); // 整个数组的地址
//	printf("%p\n\n", &arr + 1);
//	// 1. &arr - &数组名-数组名不是首元素的地址-数组名表示整个数组 - &数组名 取出的是整个数组的地址
//	// 2. sizeof(arr) - sizeof(数组名) - 数组名表示的整个数组 - sizeof(数组名)计算的是整个数组的大小
//	return 0;
//}


// 指针运算
// 指针+-整数
// 指针+-指针
// 指针的关系运算

//int my_strlen(char* str)
//{
//	char* start = str;
//	char* end = str;
//	while (*end != '\0')
//	{
//		end++;
//	}
//	return end - start;
//}
//int main()
//{
//	//
//	// strlen - 求字符串长度
//	// 递归 - 模拟实现了strlen - 计数器的方式1，递归的方式2
//	//
//	char arr[] = "bit";
//	int len = my_strlen(arr);
//	printf("%d\n", len);
//
//	return 0;
//}



//// 指针 +- 指针
//#define N_VALUES 5
//int main()
//{
//	float values[N_VALUES];
//	float* vp;
//
//	// 方式1
//	/*for (vp = &values[0]; vp < &values[N_VALUES];)
//	{
//		*vp++ = 0;
//	}*/
//
//	//方式2
//	/*for (vp = &values[N_VALUES]; vp > &values[0];)
//	{
//		*--vp = 0;
//	}*/
//
//	// 方式2 - 简化如下
//	for(vp = &values[N_VALUES - 1]; vp >= &values[0]; vp--)
//	{
//		*vp = 0;
//	}
//
//	// 打印字符串
//	int i = 0;
//	float* p = NULL;
//	p = values;
//	for (i = 0; i < N_VALUES; i++)
//	{
//		printf("%f ", *p);
//		p++;
//	}
//	return 0;
//}


// 指针 +- 整数
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int i = 0;
//	int* p = NULL;
//	p = arr;
//	/*for (i = 0; i < sz; i++)
//	{
//		printf("%d ", *p);
//		p++;
//	}*/
//	for (i = 0; i < 5; i++)
//	{
//		printf("%d ", *p);
//		p += 2;
//	}
//	return 0;
//}



// 使用 指针 注意事项
// 1.指针初始化
// 2.小心指针越界
// 3.指针指向空间释放，即使置NULL
// 4.指针使用之前检查有效性

//int main()
//{
//	int* p = NULL;
//	int a = 10;
//	p = &a;
//	if (p != NULL)
//	{
//		*p = 20;
//	}
//	printf("%d\n", a);
//	return 0;
//}


//int main()
//{
//	int* p = NULL;// NULL -- 初始化指针，给指针赋值
//	return 0;
//}

//  指针指向的空间释放
//int* test()
//{
//	int a = 10;
//	return &a;
//}
//int main()
//{
//	int* p = test();
//	*p = 20;
//	return 0;
//}


//// 指针越界访问
//int main()
//{
//	int arr[10] = { 0 };
//	int* p = arr;
//	int i = 0;
//	for (i = 0; i < 11; i++)
//	{
//		// 当指针指向的范围超出数组arr的范围时，p就是野指针
//		*(p++) = i;
//	}
//	return 0;
//}


//野指针  指针指向的位置是随机的、不可知的
//int main()
//{
//	int a = 0;
//	int* p;// 局部变量指针未初始化，默认为随机值
//	*p = 20;
//	return 0;
//}

//int main()
//{
//	char arr[10] = { 0 };
//	//int* p = arr;
//	char* p = arr;
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*(p + i) = 1;
//	}
//	return 0;
//}

//int main()
//{
//	int a = 0x11223344;
//	int* pa = &a;
//	char b = 0x11223344;
//	char* pc = &b;
//	printf("%p\n", pa);
//	printf("%p\n", pa + 1);
//	printf("%p\n", pc);
//	printf("%p\n", pc + 1);
//	//
//	//指针类型决定了：指针走一步走多远（指针的步长）
//	//int* p; p + 1 --> 4    (单位：字节)
//	//char* p; p + 1 --> 1
//	//double* p; p + 1 --> 8
// 
//	return 0;
//}
